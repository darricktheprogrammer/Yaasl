{
    "docs": [
        {
            "location": "/",
            "text": "Yet Another AppleScript Library\n\u00b6\n\n\nYaasl is a collection of Applescript libraries with useful subroutines. It mostly provides basic functionality found in other languages, and is heavily based on the Python standard library. On top of basic functionality, like splitting and joining strings, Yaasl also provides some more advanced functions, such as the functional \nmap\n and \nfilter\n routines and a simplistic version of Python's \nstring.format\n.\n\n\nSee the full documentation at \n.readthedocs.io.\n\n\nWhy another library?\n\u00b6\n\n\nThere are plenty of libraries out there, but they tend to exist to simply scratch the original maintainer's itch tailored to their own use case. This leaves each library only providing partial functionality for other end users. \napplescript-stdlib\n shares some of the same goals as Yaasl, but relies on SDEFS and Script Bundles, and is meant as a proof-of-concept for actual built-in Applescript commands, where Yaasl aims for a pure Applescript solution.\n\n\nYaasl comes with a full test suite and complete auto-api documentation.\n\n\nInstallation options\n\u00b6\n\n\nOpen each library in Script Editor and save as a compiled script. Or compile on the command line using \nosacompile\n:\n\n\nosacompile ./list.applescript > \"~/Library/Script Libraries/list.scpt\"\n\n\n\n\nUsage\n\u00b6\n\n\nIf you've installed the libraries in the \nScript Libraries\n folder, you can import libraries with the \nuse\n statement.\n\n\nuse strlib: script \"string\"\nstrlib's format(\"This is a {} string\", \"test\")\n--> This is a test string\n\n\n\n\nIf the libraries are located elsewhere, use them by using the \nload script\n statement\n\n\nset strlib to load script file \"/path/to/string.scpt\"\nstrlib's format(\"This is a {} string\", \"test\")\n--> This is a test string",
            "title": "Introduction"
        },
        {
            "location": "/#yet-another-applescript-library",
            "text": "Yaasl is a collection of Applescript libraries with useful subroutines. It mostly provides basic functionality found in other languages, and is heavily based on the Python standard library. On top of basic functionality, like splitting and joining strings, Yaasl also provides some more advanced functions, such as the functional  map  and  filter  routines and a simplistic version of Python's  string.format .  See the full documentation at  .readthedocs.io.",
            "title": "Yet Another AppleScript Library"
        },
        {
            "location": "/#why-another-library",
            "text": "There are plenty of libraries out there, but they tend to exist to simply scratch the original maintainer's itch tailored to their own use case. This leaves each library only providing partial functionality for other end users.  applescript-stdlib  shares some of the same goals as Yaasl, but relies on SDEFS and Script Bundles, and is meant as a proof-of-concept for actual built-in Applescript commands, where Yaasl aims for a pure Applescript solution.  Yaasl comes with a full test suite and complete auto-api documentation.",
            "title": "Why another library?"
        },
        {
            "location": "/#installation-options",
            "text": "Open each library in Script Editor and save as a compiled script. Or compile on the command line using  osacompile :  osacompile ./list.applescript > \"~/Library/Script Libraries/list.scpt\"",
            "title": "Installation options"
        },
        {
            "location": "/#usage",
            "text": "If you've installed the libraries in the  Script Libraries  folder, you can import libraries with the  use  statement.  use strlib: script \"string\"\nstrlib's format(\"This is a {} string\", \"test\")\n--> This is a test string  If the libraries are located elsewhere, use them by using the  load script  statement  set strlib to load script file \"/path/to/string.scpt\"\nstrlib's format(\"This is a {} string\", \"test\")\n--> This is a test string",
            "title": "Usage"
        },
        {
            "location": "/api-reference/list/",
            "text": "Library for working with and manipulating lists\n\n\nFile level functions\n\u00b6\n\n\ncount_instances\n\u00b6\n\n\ncount_instances(value, ls)\n\n\n\n\nCount the amount of times an item appears in a list.\n\n\nArguments\n\n\n\n\n\nvalue\n [\nAny\n] The item to find\n\n\nls\n [\nList\n] The list to search for the value.\n\n\n\n\nReturns\n\n\n\n\n\n[\nInteger\n] \n\n\n\n\n\n\ndiff\n\u00b6\n\n\ndiff(l1, l2)\n\n\n\n\nReturn the values of the first list that are not present in the second list.\n\n\nBecause of Applescript comparison limitations, records and lists are not supported by this routine. Any lists containing a record or list will throw a TypeError.\n\n\nArguments\n\n\n\n\n\nl1\n [\nList\n] The first list to compare. This is where the result set will come from.\n\n\nl2\n [\nList\n] The list that is being compared to\n\n\n\n\nReturns\n\n\n\n\n\n[\nList\n] \n\n\n\n\nExamples\n\n\n\ndiff({\"a\", \"b\", \"c\", \"d\"}, {\"a\", \"b\", \"e\", \"f\"})\n--> {\"c\", \"d\"}\n\n\n\n\n\n\nindex_of\n\u00b6\n\n\nindex_of(theItem, ls)\n\n\n\n\nGet the index of the first occurrence of an item in a list.\n\n\nApplescript provides the \noffset\n command for strings, but does not provide a way to get the index of an item in a list. This provides that missing functionality.\n\n\nReturns 0 if the item is not found.\n\n\nArguments\n\n\n\n\n\ntheItem\n [\nAny\n] The item to find in the list\n\n\nls\n [\nList\n] The list in which to find the item\n\n\n\n\nReturns\n\n\n\n\n\n[\nInteger\n] \n\n\n\n\n\n\ninsert\n\u00b6\n\n\ninsert(theItem, ix, ls)\n\n\n\n\nInsert an item into a given position in a list.\n\n\nThe item will be placed in the position before the given index, so \ninsert(x, 1, ls)\n will be placed in the first position and \ninsert(x, (count ls) + 1, ls)\n is the same as \nset end of ls to x\n.\n\n\nArguments\n\n\n\n\n\ntheItem\n [\nAny\n] The item to insert into the list\n\n\nix\n [\nInteger\n] The index where the item should be inserted into the list\n\n\nls\n [\nList\n] The list in which to insert the item\n\n\n\n\nReturns\n\n\n\n\n\n[\nList\n] \n\n\n\n\nExamples\n\n\n\ninsert(\"d\", 4, {\"a\", \"b\", \"c\"})\n--> {\"a\", \"b\", \"c\", \"d\"}\n\n\n\n\n\n\nintersect\n\u00b6\n\n\nintersect(l1, l2)\n\n\n\n\nReturn only the values of the first list also contained in the second list.\n\n\nBasically the opposite of \ndiff()\n\n\nArguments\n\n\n\n\n\nl1\n [\nList\n] The first list to compare. This is where the result set will come from.\n\n\nl2\n [\nList\n] The list that is being compared to\n\n\n\n\nReturns\n\n\n\n\n\n[\nList\n] \n\n\n\n\nExamples\n\n\n\nintersect({\"a\", \"b\", \"c\", \"d\"}, {\"a\", \"b\", \"e\", \"f\"})\n--> {\"a\", \"b\"}\n\n\n\n\n\n\nmove_item\n\u00b6\n\n\nmove_item(ls, oldindex, newindex)\n\n\n\n\nMove an item from one spot in the list to another.\n\n\nNote that \nmove_item\n removes the item from the list \nfirst\n, then readds it in the desired location. So, if you want to move an item to the end of a 3 item list, you would specify \n3\n as the \nnewindex\n, not \n4\n. @example move_item({\"a\", \"b\", \"c\"}, 1, 3) --> {\"b\", \"c\", \"a\"}\n\n\nArguments\n\n\n\n\n\nls\n [\nList\n] The list containing the element\n\n\noldindex\n [\nInteger\n] The index of the item to move\n\n\nnewindex\n [\nInteger\n] The index to where the item should be moved\n\n\n\n\nReturns\n\n\n\n\n\n[\nList\n] \n\n\n\n\nExamples\n\n\n\nmove_item({\"a\", \"b\", \"c\"}, 1, 4)\n--> IndexError: Cannot insert item at index 4 when list has 2 items. (705)\n\n\n\n\n\n\npop\n\u00b6\n\n\npop(ls)\n\n\n\n\nRemove the last item from a list and return it.\n\n\nActs as a shortcut for \npop_index((count ls), ls)\n\n\nBecause an item cannot be deleted in place from a list, the return value will be a list containing both the popped value and the original list minus the last item (items 1 thru -2 of the list).\n\n\nThe first item will be the popped value. The second value will be the updated list.\n\n\nArguments\n\n\n\n\n\nls\n [\nList\n] The list from which to pop the last value\n\n\n\n\nReturns\n\n\n\n\n\n[\nList\n] \n\n\n\n\nExamples\n\n\n\nlistlib's pop({\"a\", \"b\", \"c\"})\n--> {\"c\", {\"a\", \"b\"}}\n\n\n\n\n\n\npop_index\n\u00b6\n\n\npop_index(ix, ls)\n\n\n\n\nRemove an item from a list at the given index and return it.\n\n\nBecause an item cannot be deleted in place from a list, the return value will be a list containing both the popped value and the original list minus the popped item (\nrest of list\n if index is 1).\n\n\nThe first item will be the popped value. The second value will be the updated list.\n\n\nIf you just want to delete at an item at an index and do not care about the return value, you can run \npop_index()\n and simply ignore the first return value.\n\n\n\n\nWarning\n\n\npop_index()\n does not support reverse indexing.\n\n\nYou will receive an error for \npop_index(-1, ls)\n. To reverse index you will need to pass the actual index number to be popped: \npop_index((count ls), ls)\n\n\n\n\nArguments\n\n\n\n\n\nix\n [\nInteger\n] The index to pop from the list\n\n\nls\n [\nList\n] The list from which to pop the last value\n\n\n\n\nReturns\n\n\n\n\n\n[\nList\n] \n\n\n\n\nExamples\n\n\n\n-- Pop an item and get its value\nlistlib's pop_index(2, {\"a\", \"b\", \"c\"})\n--> {\"b\", {\"a\", \"c\"}}\n\n\n\n\n-- Delete an item from a list, ignoring its return value\nset {_, ls} to listlib's pop_index(2, {\"a\", \"b\", \"c\"})\n\n\n\n\n\n\nremove\n\u00b6\n\n\nremove(theItem, ls)\n\n\n\n\nRemove the first occurrence of an item from a list.\n\n\nIf the item is not present in the list, the list will remain unchanged.\n\n\nArguments\n\n\n\n\n\ntheItem\n [\nAny\n]  The item to remove\n\n\nls\n [\nList\n] The list from which to remove the item.\n\n\n\n\nReturns\n\n\n\n\n\n[\nList\n] \n\n\n\n\n\n\nsort\n\u00b6\n\n\nsort(theList)\n\n\n\n\nSort a list.\n\n\nThis is the quicksort routine taken from Kevin Bradley's Nite Flite library. http://mac.brothersoft.com/nite-flite-script-library.html\n\n\nArguments\n\n\n\n\n\ntheList\n [\nList\n] The list to sort\n\n\n\n\nReturns\n\n\n\n\n\n[\nList\n] \n\n\n\n\n\n\nunique\n\u00b6\n\n\nunique(ls)\n\n\n\n\nRemove duplicate items from a list.\n\n\nBecause of Applescript comparison limitations, records and lists are not supported by this routine. Any lists containing a record or list will throw a TypeError.\n\n\nArguments\n\n\n\n\n\nls\n [\nList\n] The list containing duplicates to delete\n\n\n\n\nReturns\n\n\n\n\n\n[\nList\n] \n\n\n\n\nExamples\n\n\n\nunique({\"a\", \"b\", \"c\", \"a\", \"b\"})\n--> {\"a\", \"b\", c}\n\n\n\n\n\n\nzip\n\u00b6\n\n\nzip(ls1, ls2)\n\n\n\n\nZip two lists together, creating a list of 2-item lists.\n\n\nWorks the same way as \nzip_many()\n except for only two lists.\n\n\nArguments\n\n\n\n\n\nls1\n [\nList\n] :\n\n\nls2\n [\nList\n] :\n\n\n\n\nReturns\n\n\n\n\n\n[\nList\n] \n\n\n\n\nExamples\n\n\n\nset l1 to {\"a\", \"b\", \"c\"}\nset l2 to {\"d\", \"e\", \"f\"}\nzip(l1, l2)\n--> {{\"a\", \"d\"}, {\"b\", \"e\"}, {\"c\", \"f\"}}\n\n\n\n\n\n\nzip_many\n\u00b6\n\n\nzip_many(ls)\n\n\n\n\nZip lists together, creating a list of n-item lists, where n = (count lists).\n\n\nIterate through each of the given lists, adding their current values to an n-item list. If no lists are given (\nzip_many()\n receives a zero-item list), an empty list will be returned.\n\n\nIf the lists are not the same length, the shortest will be used as the iteration count, and the remaining items of the longer lists will be thrown away.\n\n\nArguments\n\n\n\n\n\nls\n [\nList\n] A list of lists\n\n\n\n\nReturns\n\n\n\n\n\n[\nList\n] \n\n\n\n\nExamples\n\n\n\nzip_many({})\n--> {}\n\n\n\n\nset l1 to {\"a\", \"b\", \"c\"}\nset l2 to {\"d\", \"e\", \"f\"}\nset l3 to {1, 2, 3}\nzip_many({l1, l2, l3})\n--> {{\"a\", \"d\", 1}, {\"b\", \"e\", 2}, {\"c\", \"f\", 3}}\n\n\n\n\nset l1 to {\"a\", \"b\", \"c\"}\nset l2 to {\"d\", \"e\", \"f\"}\nset l3 to {\"1\"}\nzip_many({l1, l2, l3})\n--> {{\"a\", \"d\", 1}}",
            "title": "list.applescript"
        },
        {
            "location": "/api-reference/list/#file-level-functions",
            "text": "",
            "title": "File level functions"
        },
        {
            "location": "/api-reference/list/#count_instances",
            "text": "count_instances(value, ls)  Count the amount of times an item appears in a list.  Arguments   value  [ Any ] The item to find  ls  [ List ] The list to search for the value.   Returns   [ Integer ]",
            "title": "count_instances"
        },
        {
            "location": "/api-reference/list/#diff",
            "text": "diff(l1, l2)  Return the values of the first list that are not present in the second list.  Because of Applescript comparison limitations, records and lists are not supported by this routine. Any lists containing a record or list will throw a TypeError.  Arguments   l1  [ List ] The first list to compare. This is where the result set will come from.  l2  [ List ] The list that is being compared to   Returns   [ List ]    Examples  diff({\"a\", \"b\", \"c\", \"d\"}, {\"a\", \"b\", \"e\", \"f\"})\n--> {\"c\", \"d\"}",
            "title": "diff"
        },
        {
            "location": "/api-reference/list/#index_of",
            "text": "index_of(theItem, ls)  Get the index of the first occurrence of an item in a list.  Applescript provides the  offset  command for strings, but does not provide a way to get the index of an item in a list. This provides that missing functionality.  Returns 0 if the item is not found.  Arguments   theItem  [ Any ] The item to find in the list  ls  [ List ] The list in which to find the item   Returns   [ Integer ]",
            "title": "index_of"
        },
        {
            "location": "/api-reference/list/#insert",
            "text": "insert(theItem, ix, ls)  Insert an item into a given position in a list.  The item will be placed in the position before the given index, so  insert(x, 1, ls)  will be placed in the first position and  insert(x, (count ls) + 1, ls)  is the same as  set end of ls to x .  Arguments   theItem  [ Any ] The item to insert into the list  ix  [ Integer ] The index where the item should be inserted into the list  ls  [ List ] The list in which to insert the item   Returns   [ List ]    Examples  insert(\"d\", 4, {\"a\", \"b\", \"c\"})\n--> {\"a\", \"b\", \"c\", \"d\"}",
            "title": "insert"
        },
        {
            "location": "/api-reference/list/#intersect",
            "text": "intersect(l1, l2)  Return only the values of the first list also contained in the second list.  Basically the opposite of  diff()  Arguments   l1  [ List ] The first list to compare. This is where the result set will come from.  l2  [ List ] The list that is being compared to   Returns   [ List ]    Examples  intersect({\"a\", \"b\", \"c\", \"d\"}, {\"a\", \"b\", \"e\", \"f\"})\n--> {\"a\", \"b\"}",
            "title": "intersect"
        },
        {
            "location": "/api-reference/list/#move_item",
            "text": "move_item(ls, oldindex, newindex)  Move an item from one spot in the list to another.  Note that  move_item  removes the item from the list  first , then readds it in the desired location. So, if you want to move an item to the end of a 3 item list, you would specify  3  as the  newindex , not  4 . @example move_item({\"a\", \"b\", \"c\"}, 1, 3) --> {\"b\", \"c\", \"a\"}  Arguments   ls  [ List ] The list containing the element  oldindex  [ Integer ] The index of the item to move  newindex  [ Integer ] The index to where the item should be moved   Returns   [ List ]    Examples  move_item({\"a\", \"b\", \"c\"}, 1, 4)\n--> IndexError: Cannot insert item at index 4 when list has 2 items. (705)",
            "title": "move_item"
        },
        {
            "location": "/api-reference/list/#pop",
            "text": "pop(ls)  Remove the last item from a list and return it.  Acts as a shortcut for  pop_index((count ls), ls)  Because an item cannot be deleted in place from a list, the return value will be a list containing both the popped value and the original list minus the last item (items 1 thru -2 of the list).  The first item will be the popped value. The second value will be the updated list.  Arguments   ls  [ List ] The list from which to pop the last value   Returns   [ List ]    Examples  listlib's pop({\"a\", \"b\", \"c\"})\n--> {\"c\", {\"a\", \"b\"}}",
            "title": "pop"
        },
        {
            "location": "/api-reference/list/#pop_index",
            "text": "pop_index(ix, ls)  Remove an item from a list at the given index and return it.  Because an item cannot be deleted in place from a list, the return value will be a list containing both the popped value and the original list minus the popped item ( rest of list  if index is 1).  The first item will be the popped value. The second value will be the updated list.  If you just want to delete at an item at an index and do not care about the return value, you can run  pop_index()  and simply ignore the first return value.   Warning  pop_index()  does not support reverse indexing.  You will receive an error for  pop_index(-1, ls) . To reverse index you will need to pass the actual index number to be popped:  pop_index((count ls), ls)   Arguments   ix  [ Integer ] The index to pop from the list  ls  [ List ] The list from which to pop the last value   Returns   [ List ]    Examples  -- Pop an item and get its value\nlistlib's pop_index(2, {\"a\", \"b\", \"c\"})\n--> {\"b\", {\"a\", \"c\"}}  -- Delete an item from a list, ignoring its return value\nset {_, ls} to listlib's pop_index(2, {\"a\", \"b\", \"c\"})",
            "title": "pop_index"
        },
        {
            "location": "/api-reference/list/#remove",
            "text": "remove(theItem, ls)  Remove the first occurrence of an item from a list.  If the item is not present in the list, the list will remain unchanged.  Arguments   theItem  [ Any ]  The item to remove  ls  [ List ] The list from which to remove the item.   Returns   [ List ]",
            "title": "remove"
        },
        {
            "location": "/api-reference/list/#sort",
            "text": "sort(theList)  Sort a list.  This is the quicksort routine taken from Kevin Bradley's Nite Flite library. http://mac.brothersoft.com/nite-flite-script-library.html  Arguments   theList  [ List ] The list to sort   Returns   [ List ]",
            "title": "sort"
        },
        {
            "location": "/api-reference/list/#unique",
            "text": "unique(ls)  Remove duplicate items from a list.  Because of Applescript comparison limitations, records and lists are not supported by this routine. Any lists containing a record or list will throw a TypeError.  Arguments   ls  [ List ] The list containing duplicates to delete   Returns   [ List ]    Examples  unique({\"a\", \"b\", \"c\", \"a\", \"b\"})\n--> {\"a\", \"b\", c}",
            "title": "unique"
        },
        {
            "location": "/api-reference/list/#zip",
            "text": "zip(ls1, ls2)  Zip two lists together, creating a list of 2-item lists.  Works the same way as  zip_many()  except for only two lists.  Arguments   ls1  [ List ] :  ls2  [ List ] :   Returns   [ List ]    Examples  set l1 to {\"a\", \"b\", \"c\"}\nset l2 to {\"d\", \"e\", \"f\"}\nzip(l1, l2)\n--> {{\"a\", \"d\"}, {\"b\", \"e\"}, {\"c\", \"f\"}}",
            "title": "zip"
        },
        {
            "location": "/api-reference/list/#zip_many",
            "text": "zip_many(ls)  Zip lists together, creating a list of n-item lists, where n = (count lists).  Iterate through each of the given lists, adding their current values to an n-item list. If no lists are given ( zip_many()  receives a zero-item list), an empty list will be returned.  If the lists are not the same length, the shortest will be used as the iteration count, and the remaining items of the longer lists will be thrown away.  Arguments   ls  [ List ] A list of lists   Returns   [ List ]    Examples  zip_many({})\n--> {}  set l1 to {\"a\", \"b\", \"c\"}\nset l2 to {\"d\", \"e\", \"f\"}\nset l3 to {1, 2, 3}\nzip_many({l1, l2, l3})\n--> {{\"a\", \"d\", 1}, {\"b\", \"e\", 2}, {\"c\", \"f\", 3}}  set l1 to {\"a\", \"b\", \"c\"}\nset l2 to {\"d\", \"e\", \"f\"}\nset l3 to {\"1\"}\nzip_many({l1, l2, l3})\n--> {{\"a\", \"d\", 1}}",
            "title": "zip_many"
        },
        {
            "location": "/api-reference/functools/",
            "text": "Library to add additional functional programming support to Applescript. Contains helper functions that are able to be passed into \nmap()\n and \nfilter()\n. These are duplicates of Applescript built-in functionality, but because the built-in functionality are not first-class functions, they are unable to be passed into functional programming tools.\n\n\nFor example, there are helper functions for coercion such as \ntostring(x)\n. Even though this is built into the language, the helper function is there so it can be passed into \nmap()\n like in the following example: \nmap(funclib's tostring, theList)\n will convert \n{1, 2, 3}\n to \n{\"1\", \"2\", \"3\"}\n.\n\n\n\n\nWarning\n\n\nAny function passed to \nmap\n or \nfilter\n that is not self contained (i.e., it calls another function) will cause an error. Once the function is passed to \nfunctools\n, it is then a property of the \nfunctools\n library, meaning it no longer has access to any of the functions in it's own library. Until a fix can be determined, only attempt to \nmap\n or \nfilter\n using self contained functions.\n\n\n\n\n_FunctionRunner\n\u00b6\n\n\nObject that is responsible for actually running a single function and returning a result.\n\n\n_FunctionRunner.runit\n\u00b6\n\n\nrunit(f, arg)\n\n\n\n\nRun a given function with a single argument.\n\n\nThe arg will be an item in a list.\n\n\nArguments\n\n\n\n\n\nf\n [\nFunction\n]  The function to run\n\n\narg\n [\nAny\n]  An argument to the function\n\n\n\n\nReturns\n\n\n\n\n\n[\nAny\n] \n\n\n\n\n\n\n_FunctionRunner.runwitharg\n\u00b6\n\n\nrunwitharg(f, arg, extra_arg)\n\n\n\n\nRun a given function with two arguments.\n\n\nThe first argument will be the item from a list. The second will be an extra argument needed for the function. This argument may be used as a comparison point or operator against the first argument.\n\n\nArguments\n\n\n\n\n\nf\n [\nFunction\n]  The function to run\n\n\narg\n [\nAny\n]  An argument to the function\n\n\nextra_arg\n [\nAny\n]  The second argument. Either a comparison point or operator against the first argument\n\n\n\n\nReturns\n\n\n\n\n\n[\nAny\n] \n\n\n\n\n\n\nFile level functions\n\u00b6\n\n\ncontains_\n\u00b6\n\n\ncontains_(x, ls)\n\n\n\n\nReturn \ntrue\n if the list \nls\n contains \nx\n\n\nArguments\n\n\n\n\n\nx\n \n\n\nls\n \n\n\n\n\n\n\neq\n\u00b6\n\n\neq(x, y)\n\n\n\n\nReturn \ntrue\n if \nx\n equals \ny\n\n\nArguments\n\n\n\n\n\nx\n \n\n\ny\n \n\n\n\n\n\n\nfilter\n\u00b6\n\n\nfilter(f, ls)\n\n\n\n\nCreate a list from ls for each item that returns true when passed through f\n\n\nArguments\n\n\n\n\n\nf\n [\nFunction\n] \n\n\nls\n [\nList\n] \n\n\n\n\nReturns\n\n\n\n\n\n[\nList\n] \n\n\n\n\nExamples\n\n\n\nfilter(is_even, {1, 2, 3})\n--> {2}\n\n\n\n\n\n\nfilter_with_arg\n\u00b6\n\n\nfilter_with_arg(f, ls, arg)\n\n\n\n\nSame as \nfilter()\n, but with an additional argument.\n\n\nThe additional argument is usually used to make a comparison to the original value.\n\n\nArguments\n\n\n\n\n\nf\n [\nFunction\n] \n\n\nls\n [\nList\n] \n\n\narg\n [\nAny\n] \n\n\n\n\nReturns\n\n\n\n\n\n[\nList\n] \n\n\n\n\nExamples\n\n\n\nfilter_with_arg(lte, {1, 2, 3, 4, 5, 6}, 4)\n--> {1, 2, 3, 4}\n\n\n\n\n\n\ngt\n\u00b6\n\n\ngt(x, y)\n\n\n\n\nReturn \ntrue\n if \nx\n greater than \ny\n\n\nArguments\n\n\n\n\n\nx\n \n\n\ny\n \n\n\n\n\n\n\ngte\n\u00b6\n\n\ngte(x, y)\n\n\n\n\nReturn \ntrue\n if \nx\n greater than or equal to \ny\n\n\nArguments\n\n\n\n\n\nx\n \n\n\ny\n \n\n\n\n\n\n\nisclass\n\u00b6\n\n\nisclass(x, cls)\n\n\n\n\nReturn \ntrue\n if class of \nx\n is \ncls\n\n\nArguments\n\n\n\n\n\nx\n \n\n\ncls\n \n\n\n\n\n\n\nisin\n\u00b6\n\n\nisin(x, ls)\n\n\n\n\nReturn \ntrue\n if \nx\n is in the list \nls\n\n\nArguments\n\n\n\n\n\nx\n \n\n\nls\n \n\n\n\n\n\n\nlen\n\u00b6\n\n\nlen(x)\n\n\n\n\nReturn the count of \nx\n\n\nArguments\n\n\n\n\n\nx\n \n\n\n\n\n\n\nlt\n\u00b6\n\n\nlt(x, y)\n\n\n\n\nReturn \ntrue\n if \nx\n is less than \ny\n\n\nArguments\n\n\n\n\n\nx\n \n\n\ny\n \n\n\n\n\n\n\nlte\n\u00b6\n\n\nlte(x, y)\n\n\n\n\nReturn \ntrue\n if \nx\n is less than or equal to \ny\n\n\nArguments\n\n\n\n\n\nx\n \n\n\ny\n \n\n\n\n\n\n\nmap\n\u00b6\n\n\nmap(f, ls)\n\n\n\n\nCreate a new list by passing each item of a list through a function.\n\n\nArguments\n\n\n\n\n\nf\n [\nFunction\n] \n\n\nls\n [\nList\n] \n\n\n\n\nReturns\n\n\n\n\n\n[\nList\n] \n\n\n\n\nExamples\n\n\n\nmap(tostring, {1, 2, 3})\n--> {\"1\", \"2\", \"3\"}\n\n\n\n\nmap(len, {\"hello\", \"world\", \"I'm\", \"here\"})\n--> {5, 5, 3, 4}\n\n\n\n\n\n\nmap_with_arg\n\u00b6\n\n\nmap_with_arg(f, ls, arg)\n\n\n\n\nSame as \nmap()\n, but with an additional argument.\n\n\nThe last argument will be supplied as a second argument to the function.\n\n\nArguments\n\n\n\n\n\nf\n [\nFunction\n] \n\n\nls\n [\nList\n] \n\n\narg\n [\nAny\n] \n\n\n\n\nReturns\n\n\n\n\n\n[\nList\n] \n\n\n\n\nExamples\n\n\n\nmap_with_arg(add_value, {1, 2, 3}, 2)\n--> {3, 4, 5}\n\n\n\n\n\n\nneq\n\u00b6\n\n\nneq(x, y)\n\n\n\n\nReturn \ntrue\n if \nx\n does not equal \ny\n\n\nArguments\n\n\n\n\n\nx\n \n\n\ny\n \n\n\n\n\n\n\ntoint\n\u00b6\n\n\ntoint(x)\n\n\n\n\nCoerce \nx\n to an integer\n\n\nArguments\n\n\n\n\n\nx\n \n\n\n\n\n\n\ntolist\n\u00b6\n\n\ntolist(x)\n\n\n\n\nCoerce \nx\n to a list\n\n\nArguments\n\n\n\n\n\nx\n \n\n\n\n\n\n\ntonum\n\u00b6\n\n\ntonum(x)\n\n\n\n\nCoerce \nx\n to a generic number\n\n\nArguments\n\n\n\n\n\nx\n \n\n\n\n\n\n\ntoreal\n\u00b6\n\n\ntoreal(x)\n\n\n\n\nCoerce \nx\n to a real number\n\n\nArguments\n\n\n\n\n\nx\n \n\n\n\n\n\n\ntostring\n\u00b6\n\n\ntostring(x)\n\n\n\n\nCoerce \nx\n to a string\n\n\nArguments\n\n\n\n\n\nx",
            "title": "functools.applescript"
        },
        {
            "location": "/api-reference/functools/#_functionrunner",
            "text": "Object that is responsible for actually running a single function and returning a result.",
            "title": "_FunctionRunner"
        },
        {
            "location": "/api-reference/functools/#_functionrunnerrunit",
            "text": "runit(f, arg)  Run a given function with a single argument.  The arg will be an item in a list.  Arguments   f  [ Function ]  The function to run  arg  [ Any ]  An argument to the function   Returns   [ Any ]",
            "title": "_FunctionRunner.runit"
        },
        {
            "location": "/api-reference/functools/#_functionrunnerrunwitharg",
            "text": "runwitharg(f, arg, extra_arg)  Run a given function with two arguments.  The first argument will be the item from a list. The second will be an extra argument needed for the function. This argument may be used as a comparison point or operator against the first argument.  Arguments   f  [ Function ]  The function to run  arg  [ Any ]  An argument to the function  extra_arg  [ Any ]  The second argument. Either a comparison point or operator against the first argument   Returns   [ Any ]",
            "title": "_FunctionRunner.runwitharg"
        },
        {
            "location": "/api-reference/functools/#file-level-functions",
            "text": "",
            "title": "File level functions"
        },
        {
            "location": "/api-reference/functools/#contains_",
            "text": "contains_(x, ls)  Return  true  if the list  ls  contains  x  Arguments   x    ls",
            "title": "contains_"
        },
        {
            "location": "/api-reference/functools/#eq",
            "text": "eq(x, y)  Return  true  if  x  equals  y  Arguments   x    y",
            "title": "eq"
        },
        {
            "location": "/api-reference/functools/#filter",
            "text": "filter(f, ls)  Create a list from ls for each item that returns true when passed through f  Arguments   f  [ Function ]   ls  [ List ]    Returns   [ List ]    Examples  filter(is_even, {1, 2, 3})\n--> {2}",
            "title": "filter"
        },
        {
            "location": "/api-reference/functools/#filter_with_arg",
            "text": "filter_with_arg(f, ls, arg)  Same as  filter() , but with an additional argument.  The additional argument is usually used to make a comparison to the original value.  Arguments   f  [ Function ]   ls  [ List ]   arg  [ Any ]    Returns   [ List ]    Examples  filter_with_arg(lte, {1, 2, 3, 4, 5, 6}, 4)\n--> {1, 2, 3, 4}",
            "title": "filter_with_arg"
        },
        {
            "location": "/api-reference/functools/#gt",
            "text": "gt(x, y)  Return  true  if  x  greater than  y  Arguments   x    y",
            "title": "gt"
        },
        {
            "location": "/api-reference/functools/#gte",
            "text": "gte(x, y)  Return  true  if  x  greater than or equal to  y  Arguments   x    y",
            "title": "gte"
        },
        {
            "location": "/api-reference/functools/#isclass",
            "text": "isclass(x, cls)  Return  true  if class of  x  is  cls  Arguments   x    cls",
            "title": "isclass"
        },
        {
            "location": "/api-reference/functools/#isin",
            "text": "isin(x, ls)  Return  true  if  x  is in the list  ls  Arguments   x    ls",
            "title": "isin"
        },
        {
            "location": "/api-reference/functools/#len",
            "text": "len(x)  Return the count of  x  Arguments   x",
            "title": "len"
        },
        {
            "location": "/api-reference/functools/#lt",
            "text": "lt(x, y)  Return  true  if  x  is less than  y  Arguments   x    y",
            "title": "lt"
        },
        {
            "location": "/api-reference/functools/#lte",
            "text": "lte(x, y)  Return  true  if  x  is less than or equal to  y  Arguments   x    y",
            "title": "lte"
        },
        {
            "location": "/api-reference/functools/#map",
            "text": "map(f, ls)  Create a new list by passing each item of a list through a function.  Arguments   f  [ Function ]   ls  [ List ]    Returns   [ List ]    Examples  map(tostring, {1, 2, 3})\n--> {\"1\", \"2\", \"3\"}  map(len, {\"hello\", \"world\", \"I'm\", \"here\"})\n--> {5, 5, 3, 4}",
            "title": "map"
        },
        {
            "location": "/api-reference/functools/#map_with_arg",
            "text": "map_with_arg(f, ls, arg)  Same as  map() , but with an additional argument.  The last argument will be supplied as a second argument to the function.  Arguments   f  [ Function ]   ls  [ List ]   arg  [ Any ]    Returns   [ List ]    Examples  map_with_arg(add_value, {1, 2, 3}, 2)\n--> {3, 4, 5}",
            "title": "map_with_arg"
        },
        {
            "location": "/api-reference/functools/#neq",
            "text": "neq(x, y)  Return  true  if  x  does not equal  y  Arguments   x    y",
            "title": "neq"
        },
        {
            "location": "/api-reference/functools/#toint",
            "text": "toint(x)  Coerce  x  to an integer  Arguments   x",
            "title": "toint"
        },
        {
            "location": "/api-reference/functools/#tolist",
            "text": "tolist(x)  Coerce  x  to a list  Arguments   x",
            "title": "tolist"
        },
        {
            "location": "/api-reference/functools/#tonum",
            "text": "tonum(x)  Coerce  x  to a generic number  Arguments   x",
            "title": "tonum"
        },
        {
            "location": "/api-reference/functools/#toreal",
            "text": "toreal(x)  Coerce  x  to a real number  Arguments   x",
            "title": "toreal"
        },
        {
            "location": "/api-reference/functools/#tostring",
            "text": "tostring(x)  Coerce  x  to a string  Arguments   x",
            "title": "tostring"
        },
        {
            "location": "/api-reference/string/",
            "text": "Library for working with and manipulating text\n\n\nFile level functions\n\u00b6\n\n\nconvert_case\n\u00b6\n\n\nconvert_case(str, tCase)\n\n\n\n\nAlternative method of converting case without directly calling the other routines.\n\n\nArguments\n\n\n\n\n\nstr\n [\nString\n] The text to convert.\n\n\ntCase\n [\nString\n] The desired case (\"uppercase\", \"lowercase\", \"titlecase\", or \"sentencecase\")\n\n\n\n\nReturns\n\n\n\n\n\n[\nString\n] \n\n\n\n\n\n\nformat\n\u00b6\n\n\nformat(str, args)\n\n\n\n\nSimplistic, python-style string formatter.\n\n\nThis routine is based on python's \nstring.format()\n method, but is a lot simpler. It will replace each instance of curly braces (\n{}\n) in the first string argument with the corresponding string from the list given as the second argument. This routine does not support python's more advanced string replacement features, such as the mini-language, or positional/keyworded substitutions.\n\n\nAs a convenience, if there is only one replacement to be made, the second argument can simply be a string. It does not have to be a list.\n\n\nTo escape a set of braces, simply put an asterisk in between them. This will tell \nformat()\n to ignore them, and they will be printed out as a standard set of braces.\n\n\nArguments\n\n\n\n\n\nstr\n [\nString\n] The original string formatting template.\n\n\nargs\n [\nString, List\n]  One or more strings used to replace \n{}\n in the string template.\n\n\n\n\nReturns\n\n\n\n\n\n[\nString\n] \n\n\n\n\nExamples\n\n\n\nformat(\"This is a {} string.\", \"test\")\n--> This is a test string.\n\n\n\n\nformat(\"This is a {} string.\", {\"test\"})\n--> This is a test string.\n\n\n\n\nformat(\"This is a {} {}\", {\"test\", \"string\"})\n--> This is a test string.\n\n\n\n\nformat(\"This is a {} string.\", {\"test\"})\n--> This is a test string.\n\n\n\n\nformat(\"These are {}: {*}.\", {\"curly braces\"})\n--> These are curly braces: {}.\n\n\n\n\n\n\njoin\n\u00b6\n\n\njoin(theList, delimiter)\n\n\n\n\nConvert a list to string, inserting a delimiter between each list item.\n\n\nArguments\n\n\n\n\n\ntheList\n [\nList\n] The list to convert.\n\n\ndelimiter\n [\nString\n] The text to insert between list items.\n\n\n\n\nReturns\n\n\n\n\n\n[\nString\n] \n\n\n\n\n\n\npad_left\n\u00b6\n\n\npad_left(str, padwidth)\n\n\n\n\nPad a string with spaces on the left until it reaches the desired width.\n\n\nArguments\n\n\n\n\n\nstr\n [\nString\n] The string to pad.\n\n\npadwidth\n [\nInteger\n] The desired width of the string.\n\n\n\n\nReturns\n\n\n\n\n\n[\nString\n] \n\n\n\n\n\n\npad_left_with_char\n\u00b6\n\n\npad_left_with_char(char, str, padwidth)\n\n\n\n\nPad a string with the given character on the left until it reaches the desired width.\n\n\nArguments\n\n\n\n\n\nchar\n [\nChar\n] A single character to be used for padding.\n\n\nstr\n [\nString\n] The string to pad.\n\n\npadwidth\n [\nInteger\n] The desired width of the string.\n\n\n\n\nReturns\n\n\n\n\n\n[\nString\n] \n\n\n\n\n\n\npad_right\n\u00b6\n\n\npad_right(str, padwidth)\n\n\n\n\nPad a string with spaces on the right until it reaches the desired width.\n\n\nArguments\n\n\n\n\n\nstr\n [\nString\n] The string to pad.\n\n\npadwidth\n [\nInteger\n] The desired width of the string.\n\n\n\n\nReturns\n\n\n\n\n\n[\nString\n] \n\n\n\n\n\n\npad_right_with_char\n\u00b6\n\n\npad_right_with_char(char, str, padwidth)\n\n\n\n\nPad a string with the given character on the right until it reaches the desired width.\n\n\nArguments\n\n\n\n\n\nchar\n [\nChar\n] A single character to be used for padding.\n\n\nstr\n [\nString\n] The string to pad.\n\n\npadwidth\n [\nInteger\n] The desired width of the string.\n\n\n\n\nReturns\n\n\n\n\n\n[\nString\n] \n\n\n\n\n\n\nsearch_and_replace\n\u00b6\n\n\nsearch_and_replace(str, oldText, newText)\n\n\n\n\nSearch for text and replace it.\n\n\nArguments\n\n\n\n\n\nstr\n [\nString\n] The original string.\n\n\noldText\n [\nString\n] The text to replace.\n\n\nnewText\n [\nString\n] The replacement text.\n\n\n\n\nReturns\n\n\n\n\n\n[\nString\n] \n\n\n\n\n\n\nsentence_case\n\u00b6\n\n\nsentence_case(str)\n\n\n\n\nConvert text to contain capital letters at beginning of each sentence.\n\n\nThe end of a sentences is considered to be one of \".!?\" followed by one or two spaces.\n\n\nArguments\n\n\n\n\n\nstr\n [\nString\n] The string to convert.\n\n\n\n\nReturns\n\n\n\n\n\n[\nString\n] \n\n\n\n\n\n\nsplit\n\u00b6\n\n\nsplit(str, delimiter)\n\n\n\n\nSplit a string into a list on the delimiter.\n\n\nArguments\n\n\n\n\n\nstr\n [\nString\n] The string to split.\n\n\ndelimiter\n [\nString\n] The delimiter on which to split the string.\n\n\n\n\nReturns\n\n\n\n\n\n[\nList\n] \n\n\n\n\n\n\ntitle_case\n\u00b6\n\n\ntitle_case(str)\n\n\n\n\nConvert text to title case.\n\n\nDoes not take punctuation into account. Only words preceded by a space will be capitalized.\n\n\nThe following words will always be converted to lowercase and not capitalized: a, an, in, the, and, but, for, or, nor, to.\n\n\nArguments\n\n\n\n\n\nstr\n [\nString\n] The text to convert.\n\n\n\n\nReturns\n\n\n\n\n\n[\nString\n] \n\n\n\n\n\n\nto_lower\n\u00b6\n\n\nto_lower(str)\n\n\n\n\nConvert a string to all lowercase, maintaining special characters.\n\n\nArguments\n\n\n\n\n\nstr\n [\nString\n] The string in which to convert the case.\n\n\n\n\nReturns\n\n\n\n\n\n[\nString\n] \n\n\n\n\n\n\nto_upper\n\u00b6\n\n\nto_upper(str)\n\n\n\n\nConvert a string to all uppercase, maintaining special characters.\n\n\nArguments\n\n\n\n\n\nstr\n [\nString\n] The string in which to convert the case.\n\n\n\n\nReturns\n\n\n\n\n\n[\nString\n] \n\n\n\n\n\n\ntrim\n\u00b6\n\n\ntrim(str)\n\n\n\n\nRemove whitespace from beginning and end of string.\n\n\nArguments\n\n\n\n\n\nstr\n [\nString\n] The string to trim.\n\n\n\n\nReturns\n\n\n\n\n\n[\nString\n]",
            "title": "string.applescript"
        },
        {
            "location": "/api-reference/string/#file-level-functions",
            "text": "",
            "title": "File level functions"
        },
        {
            "location": "/api-reference/string/#convert_case",
            "text": "convert_case(str, tCase)  Alternative method of converting case without directly calling the other routines.  Arguments   str  [ String ] The text to convert.  tCase  [ String ] The desired case (\"uppercase\", \"lowercase\", \"titlecase\", or \"sentencecase\")   Returns   [ String ]",
            "title": "convert_case"
        },
        {
            "location": "/api-reference/string/#format",
            "text": "format(str, args)  Simplistic, python-style string formatter.  This routine is based on python's  string.format()  method, but is a lot simpler. It will replace each instance of curly braces ( {} ) in the first string argument with the corresponding string from the list given as the second argument. This routine does not support python's more advanced string replacement features, such as the mini-language, or positional/keyworded substitutions.  As a convenience, if there is only one replacement to be made, the second argument can simply be a string. It does not have to be a list.  To escape a set of braces, simply put an asterisk in between them. This will tell  format()  to ignore them, and they will be printed out as a standard set of braces.  Arguments   str  [ String ] The original string formatting template.  args  [ String, List ]  One or more strings used to replace  {}  in the string template.   Returns   [ String ]    Examples  format(\"This is a {} string.\", \"test\")\n--> This is a test string.  format(\"This is a {} string.\", {\"test\"})\n--> This is a test string.  format(\"This is a {} {}\", {\"test\", \"string\"})\n--> This is a test string.  format(\"This is a {} string.\", {\"test\"})\n--> This is a test string.  format(\"These are {}: {*}.\", {\"curly braces\"})\n--> These are curly braces: {}.",
            "title": "format"
        },
        {
            "location": "/api-reference/string/#join",
            "text": "join(theList, delimiter)  Convert a list to string, inserting a delimiter between each list item.  Arguments   theList  [ List ] The list to convert.  delimiter  [ String ] The text to insert between list items.   Returns   [ String ]",
            "title": "join"
        },
        {
            "location": "/api-reference/string/#pad_left",
            "text": "pad_left(str, padwidth)  Pad a string with spaces on the left until it reaches the desired width.  Arguments   str  [ String ] The string to pad.  padwidth  [ Integer ] The desired width of the string.   Returns   [ String ]",
            "title": "pad_left"
        },
        {
            "location": "/api-reference/string/#pad_left_with_char",
            "text": "pad_left_with_char(char, str, padwidth)  Pad a string with the given character on the left until it reaches the desired width.  Arguments   char  [ Char ] A single character to be used for padding.  str  [ String ] The string to pad.  padwidth  [ Integer ] The desired width of the string.   Returns   [ String ]",
            "title": "pad_left_with_char"
        },
        {
            "location": "/api-reference/string/#pad_right",
            "text": "pad_right(str, padwidth)  Pad a string with spaces on the right until it reaches the desired width.  Arguments   str  [ String ] The string to pad.  padwidth  [ Integer ] The desired width of the string.   Returns   [ String ]",
            "title": "pad_right"
        },
        {
            "location": "/api-reference/string/#pad_right_with_char",
            "text": "pad_right_with_char(char, str, padwidth)  Pad a string with the given character on the right until it reaches the desired width.  Arguments   char  [ Char ] A single character to be used for padding.  str  [ String ] The string to pad.  padwidth  [ Integer ] The desired width of the string.   Returns   [ String ]",
            "title": "pad_right_with_char"
        },
        {
            "location": "/api-reference/string/#search_and_replace",
            "text": "search_and_replace(str, oldText, newText)  Search for text and replace it.  Arguments   str  [ String ] The original string.  oldText  [ String ] The text to replace.  newText  [ String ] The replacement text.   Returns   [ String ]",
            "title": "search_and_replace"
        },
        {
            "location": "/api-reference/string/#sentence_case",
            "text": "sentence_case(str)  Convert text to contain capital letters at beginning of each sentence.  The end of a sentences is considered to be one of \".!?\" followed by one or two spaces.  Arguments   str  [ String ] The string to convert.   Returns   [ String ]",
            "title": "sentence_case"
        },
        {
            "location": "/api-reference/string/#split",
            "text": "split(str, delimiter)  Split a string into a list on the delimiter.  Arguments   str  [ String ] The string to split.  delimiter  [ String ] The delimiter on which to split the string.   Returns   [ List ]",
            "title": "split"
        },
        {
            "location": "/api-reference/string/#title_case",
            "text": "title_case(str)  Convert text to title case.  Does not take punctuation into account. Only words preceded by a space will be capitalized.  The following words will always be converted to lowercase and not capitalized: a, an, in, the, and, but, for, or, nor, to.  Arguments   str  [ String ] The text to convert.   Returns   [ String ]",
            "title": "title_case"
        },
        {
            "location": "/api-reference/string/#to_lower",
            "text": "to_lower(str)  Convert a string to all lowercase, maintaining special characters.  Arguments   str  [ String ] The string in which to convert the case.   Returns   [ String ]",
            "title": "to_lower"
        },
        {
            "location": "/api-reference/string/#to_upper",
            "text": "to_upper(str)  Convert a string to all uppercase, maintaining special characters.  Arguments   str  [ String ] The string in which to convert the case.   Returns   [ String ]",
            "title": "to_upper"
        },
        {
            "location": "/api-reference/string/#trim",
            "text": "trim(str)  Remove whitespace from beginning and end of string.  Arguments   str  [ String ] The string to trim.   Returns   [ String ]",
            "title": "trim"
        },
        {
            "location": "/api-reference/ui/",
            "text": "Library for interacting with the user.\n\n\nMostly contains shortcuts that help exclude error handling inline, or focus the dialog window, which does not always happen by default.\n\n\nFile level functions\n\u00b6\n\n\nchoose_from_list\n\u00b6\n\n\nchoose_from_list(choice_list, choice_prompt, default_item)\n\n\n\n\nChoose from list convenience function.\n\n\nDisplays a \nchoose from list\n dialog, ensuring that the dialog has focus when displayed. \nchoose_from_list\n also handles the basic error handling (such as error -128 user cancelled).\n\n\nNote that multiple items \nare\n allowed to be chosen. If you choose to use this function and are only expecting one value returned, you will have to get the first item of the returned list.\n\n\nArguments\n\n\n\n\n\nchoice_list\n [\nList\n] The list for the user to choose from\n\n\nchoice_prompt\n [\nString\n] The text prompt, describing to the user what they are choosing\n\n\ndefault_item\n [\nString\n] The list item to highlight by default. If that option is not in the list, no default will be highlighted\n\n\n\n\nReturns\n\n\n\n\n\n[\nList\n] \n\n\n\n\nExamples\n\n\n\nset choices to {1, 2, 3}\nset choice_prompt to \"How many times would you like to repeat?\"\nset repeat_num to item 1 of choose_from_list(choices, choice_prompt, item 1 of choices)\n--> 1",
            "title": "ui.applescript"
        },
        {
            "location": "/api-reference/ui/#file-level-functions",
            "text": "",
            "title": "File level functions"
        },
        {
            "location": "/api-reference/ui/#choose_from_list",
            "text": "choose_from_list(choice_list, choice_prompt, default_item)  Choose from list convenience function.  Displays a  choose from list  dialog, ensuring that the dialog has focus when displayed.  choose_from_list  also handles the basic error handling (such as error -128 user cancelled).  Note that multiple items  are  allowed to be chosen. If you choose to use this function and are only expecting one value returned, you will have to get the first item of the returned list.  Arguments   choice_list  [ List ] The list for the user to choose from  choice_prompt  [ String ] The text prompt, describing to the user what they are choosing  default_item  [ String ] The list item to highlight by default. If that option is not in the list, no default will be highlighted   Returns   [ List ]    Examples  set choices to {1, 2, 3}\nset choice_prompt to \"How many times would you like to repeat?\"\nset repeat_num to item 1 of choose_from_list(choices, choice_prompt, item 1 of choices)\n--> 1",
            "title": "choose_from_list"
        },
        {
            "location": "/api-reference/system/",
            "text": "Library for working with folders and files.\n\n\nFile level functions\n\u00b6\n\n\ndisk_of\n\u00b6\n\n\ndisk_of(pth)\n\n\n\n\nExtract the volume/disk name from a path.\n\n\nArguments\n\n\n\n\n\npth\n [\nString, Alias\n]  The path from which to extract the disk name\n\n\n\n\nReturns\n\n\n\n\n\n[\nString\n] \n\n\n\n\n\n\nexists_path\n\u00b6\n\n\nexists_path(pth)\n\n\n\n\nDetermine if a file or folder exists\n\n\nArguments\n\n\n\n\n\npth\n [\nString, Alias, Disk Item\n]  Representation of a file or folder. This can be a string representing a POSIX or HFS+ path, a file alias, or System Events Disk Item.\n\n\n\n\nReturns\n\n\n\n\n\n[\nBoolean\n] \n\n\n\n\n\n\nparent_dir\n\u00b6\n\n\nparent_dir(pth)\n\n\n\n\nGet the parent directory of the given path\n\n\nArguments\n\n\n\n\n\npth\n [\nString, Alias, Disk Item\n]  The original path\n\n\n\n\nReturns\n\n\n\n\n\n[\nString\n] \n\n\n\n\n\n\npath_parts\n\u00b6\n\n\npath_parts(pth)\n\n\n\n\nReturn the parent folder, name, and extension of a path.\n\n\nIf given a file path, the name returned will be the name of the folder, and the extension will be an empty String\n\n\nArguments\n\n\n\n\n\npth\n [\nString, Alias\n]  The file path. Accepts an HFS+ or POSIX file path or a file Alias.\n\n\n\n\nReturns\n\n\n\n\n\n[\nList\n] \n\n\n\n\n\n\nserver_connected\n\u00b6\n\n\nserver_connected(servername)\n\n\n\n\nDetermine if computer is connected to a network server share\n\n\nArguments\n\n\n\n\n\nservername\n [\nString\n] The name of the server\n\n\n\n\nReturns\n\n\n\n\n\n[\nBoolean\n]",
            "title": "system.applescript"
        },
        {
            "location": "/api-reference/system/#file-level-functions",
            "text": "",
            "title": "File level functions"
        },
        {
            "location": "/api-reference/system/#disk_of",
            "text": "disk_of(pth)  Extract the volume/disk name from a path.  Arguments   pth  [ String, Alias ]  The path from which to extract the disk name   Returns   [ String ]",
            "title": "disk_of"
        },
        {
            "location": "/api-reference/system/#exists_path",
            "text": "exists_path(pth)  Determine if a file or folder exists  Arguments   pth  [ String, Alias, Disk Item ]  Representation of a file or folder. This can be a string representing a POSIX or HFS+ path, a file alias, or System Events Disk Item.   Returns   [ Boolean ]",
            "title": "exists_path"
        },
        {
            "location": "/api-reference/system/#parent_dir",
            "text": "parent_dir(pth)  Get the parent directory of the given path  Arguments   pth  [ String, Alias, Disk Item ]  The original path   Returns   [ String ]",
            "title": "parent_dir"
        },
        {
            "location": "/api-reference/system/#path_parts",
            "text": "path_parts(pth)  Return the parent folder, name, and extension of a path.  If given a file path, the name returned will be the name of the folder, and the extension will be an empty String  Arguments   pth  [ String, Alias ]  The file path. Accepts an HFS+ or POSIX file path or a file Alias.   Returns   [ List ]",
            "title": "path_parts"
        },
        {
            "location": "/api-reference/system/#server_connected",
            "text": "server_connected(servername)  Determine if computer is connected to a network server share  Arguments   servername  [ String ] The name of the server   Returns   [ Boolean ]",
            "title": "server_connected"
        },
        {
            "location": "/api-reference/math/",
            "text": "Library for basic math functions\n\n\nFile level functions\n\u00b6\n\n\n_assert_is_number\n\u00b6\n\n\n_assert_is_number(n)\n\n\n\n\nType checking. Determine if a value is of the desired type. If not throw an error.\n\n\nThis is for internal library use, so that the error checking is not all over the place.\n\n\nArguments\n\n\n\n\n\nn\n [\nAny\n]  The value to check\n\n\n\n\nReturns\n\n\n\n\n\n[\nVoid\n] \n\n\n\n\n\n\nabs\n\u00b6\n\n\nabs(n)\n\n\n\n\nCalculate the absolute value of a number\n\n\nArguments\n\n\n\n\n\nn\n [\nNumber\n] \n\n\n\n\nReturns\n\n\n\n\n\n[\nNumber\n] \n\n\n\n\n\n\navg\n\u00b6\n\n\navg(ls)\n\n\n\n\nCompute the average given a list of numbers\n\n\nArguments\n\n\n\n\n\nls\n [\nList\n]  A list of numbers (can be reals or integers)\n\n\n\n\nReturns\n\n\n\n\n\n[\nReal\n] \n\n\n\n\nExamples\n\n\n\navg({1, 2, 3, 4, 5})\n--> 3.0\n\n\n\n\n\n\nceil\n\u00b6\n\n\nceil(n)\n\n\n\n\nDetermine the next integer up from the given number\n\n\nArguments\n\n\n\n\n\nn\n [\nNumber\n] \n\n\n\n\nReturns\n\n\n\n\n\n[\nInteger\n] \n\n\n\n\n\n\nfloor\n\u00b6\n\n\nfloor(n)\n\n\n\n\nDetermine the next integer down from the given number\n\n\nArguments\n\n\n\n\n\nn\n [\nNumber\n] \n\n\n\n\nReturns\n\n\n\n\n\n[\nInteger\n] \n\n\n\n\n\n\nis_even\n\u00b6\n\n\nis_even(n)\n\n\n\n\nDetermine if a number is even\n\n\nArguments\n\n\n\n\n\nn\n [\nNumber\n] \n\n\n\n\nReturns\n\n\n\n\n\n[\nBoolean\n] \n\n\n\n\n\n\nis_odd\n\u00b6\n\n\nis_odd(n)\n\n\n\n\nDetermine if a number is odd\n\n\nArguments\n\n\n\n\n\nn\n [\nNumber\n] \n\n\n\n\nReturns\n\n\n\n\n\n[\nBoolean\n] \n\n\n\n\n\n\nmax\n\u00b6\n\n\nmax(ls)\n\n\n\n\nCalculate the largest item in a list\n\n\nCan be used for any type that can be compared, not just numbers. For example, text can be compared where \nb > a\n. However, lists cannot be compared, and numbers cannot be compared to text. \nmax()\n does not try to error check item types and leaves it up to you to follow Applescript's comparison rules.\n\n\nArguments\n\n\n\n\n\nls\n [\nList\n] \n\n\n\n\nReturns\n\n\n\n\n\n[\nAny\n] \n\n\n\n\n\n\nmin\n\u00b6\n\n\nmin(ls)\n\n\n\n\nCalculate the smallest item in a list\n\n\nCan be used for any type that can be compared, not just numbers. For example, text can be compared where \nb < a\n. However, lists cannot be compared, and numbers cannot be compared to text. \nmin()\n does not try to error check item types and leaves it up to you to follow Applescript's comparison rules.\n\n\nArguments\n\n\n\n\n\nls\n [\nList\n] \n\n\n\n\nReturns\n\n\n\n\n\n[\nAny\n] \n\n\n\n\n\n\nsqrt\n\u00b6\n\n\nsqrt(n)\n\n\n\n\nCalculate the square root of a number\n\n\nArguments\n\n\n\n\n\nn\n [\nNumber\n] \n\n\n\n\nReturns\n\n\n\n\n\n[\nReal\n] \n\n\n\n\n\n\nsum\n\u00b6\n\n\nsum(ls)\n\n\n\n\nSum a list of numbers.\n\n\nReturns 0 if the list is empty.\n\n\nArguments\n\n\n\n\n\nls\n [\nList\n]  The list of numbers\n\n\n\n\nReturns\n\n\n\n\n\n[\nNumber\n] \n\n\n\n\nExamples\n\n\n\nsum({1, 2, 3})\n--> 6",
            "title": "math.applescript"
        },
        {
            "location": "/api-reference/math/#file-level-functions",
            "text": "",
            "title": "File level functions"
        },
        {
            "location": "/api-reference/math/#_assert_is_number",
            "text": "_assert_is_number(n)  Type checking. Determine if a value is of the desired type. If not throw an error.  This is for internal library use, so that the error checking is not all over the place.  Arguments   n  [ Any ]  The value to check   Returns   [ Void ]",
            "title": "_assert_is_number"
        },
        {
            "location": "/api-reference/math/#abs",
            "text": "abs(n)  Calculate the absolute value of a number  Arguments   n  [ Number ]    Returns   [ Number ]",
            "title": "abs"
        },
        {
            "location": "/api-reference/math/#avg",
            "text": "avg(ls)  Compute the average given a list of numbers  Arguments   ls  [ List ]  A list of numbers (can be reals or integers)   Returns   [ Real ]    Examples  avg({1, 2, 3, 4, 5})\n--> 3.0",
            "title": "avg"
        },
        {
            "location": "/api-reference/math/#ceil",
            "text": "ceil(n)  Determine the next integer up from the given number  Arguments   n  [ Number ]    Returns   [ Integer ]",
            "title": "ceil"
        },
        {
            "location": "/api-reference/math/#floor",
            "text": "floor(n)  Determine the next integer down from the given number  Arguments   n  [ Number ]    Returns   [ Integer ]",
            "title": "floor"
        },
        {
            "location": "/api-reference/math/#is_even",
            "text": "is_even(n)  Determine if a number is even  Arguments   n  [ Number ]    Returns   [ Boolean ]",
            "title": "is_even"
        },
        {
            "location": "/api-reference/math/#is_odd",
            "text": "is_odd(n)  Determine if a number is odd  Arguments   n  [ Number ]    Returns   [ Boolean ]",
            "title": "is_odd"
        },
        {
            "location": "/api-reference/math/#max",
            "text": "max(ls)  Calculate the largest item in a list  Can be used for any type that can be compared, not just numbers. For example, text can be compared where  b > a . However, lists cannot be compared, and numbers cannot be compared to text.  max()  does not try to error check item types and leaves it up to you to follow Applescript's comparison rules.  Arguments   ls  [ List ]    Returns   [ Any ]",
            "title": "max"
        },
        {
            "location": "/api-reference/math/#min",
            "text": "min(ls)  Calculate the smallest item in a list  Can be used for any type that can be compared, not just numbers. For example, text can be compared where  b < a . However, lists cannot be compared, and numbers cannot be compared to text.  min()  does not try to error check item types and leaves it up to you to follow Applescript's comparison rules.  Arguments   ls  [ List ]    Returns   [ Any ]",
            "title": "min"
        },
        {
            "location": "/api-reference/math/#sqrt",
            "text": "sqrt(n)  Calculate the square root of a number  Arguments   n  [ Number ]    Returns   [ Real ]",
            "title": "sqrt"
        },
        {
            "location": "/api-reference/math/#sum",
            "text": "sum(ls)  Sum a list of numbers.  Returns 0 if the list is empty.  Arguments   ls  [ List ]  The list of numbers   Returns   [ Number ]    Examples  sum({1, 2, 3})\n--> 6",
            "title": "sum"
        }
    ]
}